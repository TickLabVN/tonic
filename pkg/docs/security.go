package docs

// Field Name	Type	Applies To	Description
// type	string	Any	REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2", "openIdConnect".
// description	string	Any	A description for security scheme. CommonMark syntax MAY be used for rich text representation.
// name	string	apiKey	REQUIRED. The name of the header, query or cookie parameter to be used.
// in	string	apiKey	REQUIRED. The location of the API key. Valid values are "query", "header" or "cookie".
// scheme	string	http	REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in [RFC7235]. The values used SHOULD be registered in the IANA Authentication Scheme registry.
// bearerFormat	string	http ("bearer")	A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
// flows	OAuth Flows Object	oauth2	REQUIRED. An object containing configuration information for the flow types supported.
// openIdConnectUrl	string	openIdConnect	REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.

type SecurityScheme struct {
	Type             string      `json:"type" validate:"required,oneof=apiKey http mutualTLS oauth2 openIdConnect"`
	Description      string      `json:"description,omitempty"`
	Name             string      `json:"name,omitempty" validate:"required_if=Type apiKey"`
	In               string      `json:"in,omitempty" validate:"required_if=Type apiKey,oneof=query header cookie"`
	Scheme           string      `json:"scheme,omitempty" validate:"required_if=Type http"`
	BearerFormat     string      `json:"bearerFormat,omitempty"`
	Flows            *OAuthFlows `json:"flows,omitempty" validate:"required_if=Type oauth2"`
	OpenIDConnectURL string      `json:"openIdConnectUrl,omitempty" validate:"required_if=Type openIdConnect,url"`
}

type SecuritySchemeOrReference struct {
	SecurityScheme *SecurityScheme `json:",inline,omitempty"`
	Reference      *Reference      `json:",inline,omitempty"`
}

type SecurityRequirement map[string][]string
